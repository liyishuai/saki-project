{
    "compAutoOrderLimitHeight": 300,
    "id": 15002,
    "blockList": [
        {
            "name": "震动对象",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "56045344290_0.5524605213062797",
                        "varName": "type",
                        "varType": 0,
                        "compData": {
                            "compType": 2,
                            "compParam": {
                                "items": "指定图像,图像层（镜头）,界面层,画面",
                                "showIndex": false
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "震动对象",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 13,
                    "x": 12,
                    "width": 200,
                    "height": 32
                }
            ],
            "blockCondition": [],
            "blockHeight": 56,
            "autoOrder": true,
            "hideBlockTitle": true,
            "cmdColor": "#00ffc8"
        },
        {
            "name": "图像通道",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "56046754773_0.6205629949452272",
                        "varName": "passageIDUseVar",
                        "varType": 2,
                        "compData": {
                            "compType": 15,
                            "compParam": {
                                "items": "常量,变量",
                                "showIndex": false
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "变量",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": false,
                        "titleWidth": 0,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 9,
                    "x": 8,
                    "width": 98,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "56046754773_0.9409422358186235",
                        "varName": "passageID",
                        "varType": 0,
                        "compData": {
                            "compType": 0,
                            "compParam": {
                                "lowerLimit": 1,
                                "upperLimit": 10000,
                                "stepValue": 1,
                                "limitInteger": true,
                                "lockTextLimit": true,
                                "xDragEnabled": true,
                                "yDragEnabled": true
                            }
                        },
                        "defaultValue": "1",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "通过编号管理该显示对象：\\n1-相同的编号只允许显示一个显示对象\\n2-可通过编号来操控该显示对象",
                        "alias": "编号",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [
                        {
                            "attrID": "56046754773_0.6205629949452272",
                            "value": false,
                            "isExpression": false,
                            "jsCode": null,
                            "tsCode": null,
                            "codeName": null
                        }
                    ],
                    "y": 9,
                    "x": 95,
                    "width": 198,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "56046754773_0.8517812737966617",
                        "varName": "passageIDVar",
                        "varType": 0,
                        "compData": {
                            "compType": 6,
                            "compParam": {
                                "lowerLimit": 1,
                                "upperLimit": 10000,
                                "stepValue": 1,
                                "limitInteger": true,
                                "lockTextLimit": true,
                                "xDragEnabled": true,
                                "yDragEnabled": true
                            }
                        },
                        "defaultValue": "1",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "通过编号管理该显示对象：\\n1-相同的编号只允许显示一个显示对象\\n2-可通过编号来操控该显示对象",
                        "alias": "编号",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [
                        {
                            "attrID": "56046754773_0.6205629949452272",
                            "value": true,
                            "isExpression": false,
                            "jsCode": null,
                            "tsCode": null,
                            "codeName": null
                        }
                    ],
                    "y": 10,
                    "x": 94,
                    "width": 202,
                    "height": 32
                }
            ],
            "blockCondition": [
                {
                    "attrID": "56045344290_0.5524605213062797",
                    "value": 0,
                    "isExpression": false,
                    "jsCode": null,
                    "tsCode": null,
                    "codeName": null
                }
            ],
            "blockHeight": 57,
            "autoOrder": true,
            "hideBlockTitle": true
        },
        {
            "name": "震动方式",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "56048274368_0.8817843244317083",
                        "varName": "shakeTimeType",
                        "varType": 0,
                        "compData": {
                            "compType": 2,
                            "compParam": {
                                "items": "震动一段时间,持续震动,停止震动",
                                "showIndex": true
                            }
                        },
                        "defaultValue": "",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "震动方式",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 4,
                    "x": 7,
                    "width": 223,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "56049529022_0.3912301305367105",
                        "varName": "duringFrame",
                        "varType": 0,
                        "compData": {
                            "compType": 0,
                            "compParam": {}
                        },
                        "defaultValue": "30",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "",
                        "alias": "持续帧数",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [
                        {
                            "attrID": "56048274368_0.8817843244317083",
                            "value": 0,
                            "isExpression": false,
                            "jsCode": null,
                            "tsCode": null,
                            "codeName": null
                        }
                    ],
                    "y": 40,
                    "x": 7,
                    "width": 220,
                    "height": 32
                }
            ],
            "blockCondition": [],
            "blockHeight": 92,
            "autoOrder": true,
            "hideBlockTitle": false,
            "cmdColor": "#FFFFFF"
        },
        {
            "name": "震动幅度",
            "blockAttrs": [
                {
                    "attr": {
                        "id": "56046758251_0.6903754418875865",
                        "varName": "dx",
                        "varType": 0,
                        "compData": {
                            "compType": 1,
                            "compParam": {
                                "lowerLimit": 1,
                                "upperLimit": 10000,
                                "stepValue": 1,
                                "limitInteger": true,
                                "lockTextLimit": false,
                                "xDragEnabled": true,
                                "yDragEnabled": true,
                                "minLimit": 0,
                                "maxLimit": 20,
                                "tickValue": 1
                            }
                        },
                        "defaultValue": "5",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "通过编号管理该显示对象：\\n1-相同的编号只允许显示一个显示对象\\n2-可通过编号来操控该显示对象",
                        "alias": "强度（x）",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 16,
                    "x": 15,
                    "width": 284,
                    "height": 32
                },
                {
                    "attr": {
                        "id": "56046758251_0.6076379669529568",
                        "varName": "dy",
                        "varType": 0,
                        "compData": {
                            "compType": 1,
                            "compParam": {
                                "lowerLimit": 1,
                                "upperLimit": 10000,
                                "stepValue": 1,
                                "limitInteger": true,
                                "lockTextLimit": false,
                                "xDragEnabled": true,
                                "yDragEnabled": true,
                                "minLimit": 0,
                                "maxLimit": 20,
                                "tickValue": 1
                            }
                        },
                        "defaultValue": "5",
                        "hideMode": false,
                        "useCommand": false,
                        "onlyPointTo": false,
                        "moduleID": 1,
                        "dataStructureID": 1,
                        "arrayMode": false,
                        "arrayLength": 100,
                        "arrayAllowDelete": false,
                        "arrayAllowSwap": false,
                        "arrayAllowUpdate": false,
                        "accessMode": 1,
                        "syncMode": 0,
                        "attrTips": "通过编号管理该显示对象：\\n1-相同的编号只允许显示一个显示对象\\n2-可通过编号来操控该显示对象",
                        "alias": "强度（y）",
                        "onlyConfig": false,
                        "preview": false,
                        "autoTitleWidth": true,
                        "titleWidth": 100,
                        "eyeShow": true,
                        "lockBlock": false
                    },
                    "attrConditions": [],
                    "y": 53,
                    "x": 14,
                    "width": 285,
                    "height": 32
                }
            ],
            "blockCondition": [
                {
                    "attrID": null,
                    "value": null,
                    "isExpression": true,
                    "jsCode": "attrs.shakeTimeType != 2;\n",
                    "tsCode": "// 根据属性名称值编写条件表达式（目前支持选择框和复选框），如： (attrs.xxx>5 && attrs.yyy<=10) || attrs.zzz==6;\r\nattrs.shakeTimeType != 2;",
                    "codeName": "不是停止震动的场合"
                }
            ],
            "blockHeight": 101,
            "autoOrder": true,
            "hideBlockTitle": true
        }
    ],
    "compAutoOrder": false,
    "fastModifyAttribute": true,
    "isCustomPhraseDesc": true,
    "cmdPreviewTS": "//------------------------------------------------------------------------------------------------------\n// 编辑器预览窗口运行时提供的系统变量\n// 关于预览的流程：\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\n// -- 2.runCommand 每个指令按顺序执行一遍\n// -- 3.imageLayerPassageStart 每已使用的通道x每已使用的指令\n// 关于播放的流程\n// -- 1.imageLayerPassageClear 每已使用的通道x每已使用的指令\n// -- 2.runCommand 每个指令按顺序播放\n//------------------------------------------------------------------------------------------------------\n/**\n * 当前自定义指令的编号\n */\ndeclare var commandID: number;\n/**\n * 图像层通道数据\n */\ndeclare var imageLayerPassageData: any[];\n/**\n * 图像层显示对象容器\n */\ndeclare var imageLayer: GameImageLayer;\n/**\n * 界面层显示对象容器\n */\ndeclare var uiLayer: GameSprite;\n/**\n * 预览窗口\n */\ndeclare var previewWin: {\n    /**\n     * 清理全部事件指令产生的预览效果\n     */\n    clearData: Function;\n    /**\n     * 设置数据，刷新预览效果直到当前选中的指令行\n     */\n    setData: Function;\n    /**\n     * 当前选中的指令\n     */\n    currentSelectCmd: Command;\n    /**\n     * 视图区域是否右键移动过\n     */\n    viewAreaRightMouseMove: boolean;\n    /**\n     * 允许显示全部对象\n     */\n    allowAllDisplayObject: boolean;\n    /**\n     * 对象操作工具\n     */\n    operateObjectTool: {\n        // 刷新对象操作工具，比如来自其他地方更改了对象的位置或尺寸等，可使用该函数刷新\n        refresh: Function,\n        // 选中显示对象\n        selectObjects: (sp: GameSprite[]) => void,\n        // 需要排除缩放和旋转工具的对象\n        addExcludeOperactionObject: (sp: GameSprite) => void\n    }\n    /**\n     * 选中事件指令\n     * @param cmd 事件指令\n     * @param sendEvent 派发事件 默认=false 派发事件会刷新属性栏、预览窗口等\n     */\n    selectCmdMessageByCmd(cmd: Command, sendEvent?: boolean);\n    /**\n     * 修改指令属性\n     * @param cmd 需要修改的指令\n     * @param varName 参数变量名称\n     * @param newValue 新的值\n     */\n    modifyCommandParam: (cmd: Command, varName: string, newValue: any) => void;\n    /**\n     * 新增指令 默认是默认值，如果有写入参数的话则以参数为准 varNameValue\n     * @param customID 自定义ID\n     * @param varNameValue 额外的变量值，如存在则优先使用该值，否则使用自定义编辑器中的默认值，如 {dpX:100,dpY:200}\n     * @param selectedIndex [可选] 默认值=-2  -3=当前选中（之后） -2=当前选中（之前） -1=最尾端 0-N=自定义 \n     * @param refreshPreViewArea [可选] 默认值=true 刷新预览区\n     */\n    insertCustomCMD(customID: number, varNameValue: any, selectedIndex?: number, refreshPreViewArea?: boolean): Command;\n    /**\n     * 更改显示层\n     * @param selectedIndex 0-界面层 1-图像层\n     */\n    changeLayer(selectedIndex: number): void;\n    /**\n     * 创建菜单\n     * var menuData:any[] = [\n               {\n                   label:\"重命名\",\n                   splitLine:false,// 是否显示分割线\n                   children:[], // 存放和本身这个对象是一样的格式\n                   execute:\"functionName\", // 点击后执行的方法名称\n                   shortcutKey:\"\", //显示的快捷键名称\n                   menuHotKey:\"\", //实际作用的快捷键名称 对应Laya.KeyBoard的值 如A\n                   enabled:true, // 是否可用，不填写表示true\n                   visible:true, // 是否显示，不填写表示true\n\t\t\t\t   selected:true, // 如果存在则以打钩的形式选择此项\n\t\t\t\t   group:\"myGroupName\" // 配合selected，如若存在则同组单选\n               }\n           ];\n     * @param menuData 菜单数据\n     * @param x 全局坐标X\n     * @param y 全局坐标Y\n     * @param executeDomain 函数作用域\n     */\n    createMenu(menuData: any[], x: number, y: number, executeDomain: any);\n}\n/**\n * kds的图像震动插件用的通道数据\n */\ndeclare class kdsImageShakePassageData {\n    // ====> system 必要项\n    /**\n     * 通道编号\n     */\n    passageID: number;\n    /**\n     * 类别，一般用于区分显示对象，如图片、动画、立绘、界面都是属于不同的类别\n     */\n    type: string;\n    /**\n     * 记录关联的指令\n     */\n    cmd: Command;\n    /**\n     * 当通道覆盖时调用的函数，以便清理掉。如显示了2号图片或移动了2号图片，再次显示2号图片时会清理掉此前显示的图片或移动行为\n     */\n    onCoverPassage: Function;\n}\n// 图像层震动的场合 避免与其他冲突，如果有冲突，需要修改此处\nvar imageLayerModePassageID = 2005631;\n// 画面震动的场合 避免与其他冲突，如果有冲突，需要修改此处\nvar uiLayerModePassageID = 2005632;\n// 画面震动的场合 避免与其他冲突，如果有冲突，需要修改此处\nvar stageLayerModePassageID = 2005633;\n//------------------------------------------------------------------------------------------------------\n// [everyone used command] 逐指令行目执行\n//------------------------------------------------------------------------------------------------------\n/**\n * 逐指令执行：对应事件下按照从上至下的顺序逐行执行，如果是该自定义指令时则会执行该函数\n * 该函数用于编辑器预览和播放，如果分歧面板中筛选不经过的事件指令则不会执行该函数。\n * 比如事件页中有3个该指令，则按照顺序执行3次该函数\n * @param cmdParams 指令的自定义参数数据，根据用户设定值\n * @param cmd 对应的指令对象\n * @param isPlayMode 是否是播放模式，否则是普通的预览模式\n */\nfunction runCommand(cmdParams: ThisCommandParams, cmd: Command, isPlayMode: boolean) {\n    // 使用变量作为通道的话则忽略此指令执行\n    if (cmdParams.passageIDUseVar) {\n        return;\n    }\n    // -- 获取通道数据\n    var passageData: any;\n    // -- 指定的图像通道\n    if (cmdParams.type == 0) {\n        passageData = imageLayerPassageData[cmdParams.passageID];\n        // 没有该通道或通道储存类型不匹配或无显示对象的话则忽略掉\n        if (!passageData || !passageData.displayObject) return;\n    }\n    // -- 图像层\n    else if (cmdParams.type == 1) {\n        passageData = imageLayerPassageData[imageLayerModePassageID];\n        // 没有该通道则新建\n        if (!passageData) {\n            passageData = imageLayerPassageData[imageLayerModePassageID] = {\n                passageID: imageLayerModePassageID,\n                displayObject: imageLayer\n            } as any;\n        }\n    }\n    // -- 界面\n    else if (cmdParams.type == 2) {\n        passageData = imageLayerPassageData[uiLayerModePassageID];\n        // 没有该通道则新建\n        if (!passageData) {\n            passageData = imageLayerPassageData[uiLayerModePassageID] = {\n                passageID: uiLayerModePassageID,\n                displayObject: uiLayer\n            } as any;\n        }\n    }\n    // -- 画面\n    else if (cmdParams.type == 3) {\n        passageData = imageLayerPassageData[stageLayerModePassageID];\n        // 没有该通道则新建\n        if (!passageData) {\n            passageData = imageLayerPassageData[stageLayerModePassageID] = {\n                passageID: stageLayerModePassageID,\n                displayObject: imageLayer\n            } as any;\n        }\n    }\n    // -- 获取储存的通道，没有的话则新建\n    if (isPlayMode) {\n        // 清理震动\n        if (passageData.kds1_imageShakeClear) {\n            passageData.kds1_imageShakeClear.run();\n            passageData.kds1_imageShakeClear = null;\n        }\n        if (passageData.kds1_imageShake) {\n            os.remove_ENTERFRAME(passageData.kds1_imageShake, passageData);\n            passageData.kds1_imageShake = null;\n        }\n        if (cmdParams.shakeTimeType == 2) {\n            return;\n        }\n        // 震动函数\n        var f: Function;\n        var dx = 0;\n        var dy = 0;\n        var duringFrame = cmdParams.shakeTimeType == 0 ? cmdParams.duringFrame : null;\n        var clearDisplayObjectShake = function (displayObject: GameSprite, type: number, isOver: boolean = true) {\n            if (type == 1) {\n                // 如果与震动位置相同的话才还原，否则不还原\n                if (imageLayer[\"__imageShake_kds1_curX\"] == imageLayer.camera.offsetX && imageLayer[\"__imageShake_kds1_curY\"] == imageLayer.camera.offsetY) {\n                    imageLayer.camera.offsetX -= dx;\n                    imageLayer.camera.offsetY -= dy;\n                }\n            }\n            else if (type == 2) {\n                // 如果与震动位置相同的话才还原，否则不还原\n                if (uiLayer[\"__imageShake_kds1_curX\"] == uiLayer.x && uiLayer[\"__imageShake_kds1_curY\"] == uiLayer.y) {\n                    uiLayer.x -= dx;\n                    uiLayer.y -= dy;\n                    if (GameDialog[\"container\"]) {\n                        GameDialog[\"container\"].x -= dx;\n                        GameDialog[\"container\"].y -= dy;\n                    }\n                }\n            }\n            else if (type == 3) {\n                // 如果与震动位置相同的话才还原，否则不还原\n                if ((imageLayer.parent as GameSprite)[\"__imageShake_kds1_curX\"] == (imageLayer.parent as GameSprite).x && (imageLayer.parent as GameSprite)[\"__imageShake_kds1_curY\"] == (imageLayer.parent as GameSprite).y) {\n                    (imageLayer.parent as GameSprite).x -= dx;\n                    (imageLayer.parent as GameSprite).y -= dy;\n                }\n            }\n            else if (displayObject) {\n                // 如果与震动位置相同的话才还原，否则不还原\n                if (displayObject[\"__imageShake_kds1_curX\"] == displayObject.dpX && displayObject[\"__imageShake_kds1_curY\"] == displayObject.dpY) {\n                    displayObject.dpX -= dx;\n                    displayObject.dpY -= dy;\n                }\n            }\n            if (isOver) {\n                trace(\"结束并还原\");\n            }\n            else {\n                trace(\"还原\")\n            }\n            dx = dy = 0;\n        }\n        f = (passageData: any, displayObject: GameSprite, cmdParams: ThisCommandParams) => {\n            // 该通道的显示对象开始旋转\n            var newDx = Math.floor(cmdParams.dx * 2 * Math.random() - cmdParams.dx);\n            var newDy = Math.floor(cmdParams.dy * 2 * Math.random() - cmdParams.dy);\n            if (displayObject) {\n                clearDisplayObjectShake(displayObject, cmdParams.type, false);\n                dx = newDx;\n                dy = newDy;\n                if (cmdParams.type == 1) {\n                    imageLayer.camera.offsetX += dx;\n                    imageLayer.camera.offsetY += dy;\n                    imageLayer.updateFrame(true);\n                    imageLayer[\"__imageShake_kds1_curX\"] = imageLayer.camera.offsetX;\n                    imageLayer[\"__imageShake_kds1_curY\"] = imageLayer.camera.offsetY;\n                }\n                else if (cmdParams.type == 2) {\n                    uiLayer.x += dx;\n                    uiLayer.y += dy;\n                    if (GameDialog[\"container\"]) {\n                        GameDialog[\"container\"].x += dx;\n                        GameDialog[\"container\"].y += dy;\n                    }\n                    uiLayer[\"__imageShake_kds1_curX\"] = uiLayer.x;\n                    uiLayer[\"__imageShake_kds1_curY\"] = uiLayer.y;\n                }\n                else if (cmdParams.type == 3) {\n                    (imageLayer.parent as GameSprite).x += dx;\n                    (imageLayer.parent as GameSprite).y += dy;\n                    (imageLayer.parent as GameSprite)[\"__imageShake_kds1_curX\"] = (imageLayer.parent as GameSprite).x;\n                    (imageLayer.parent as GameSprite)[\"__imageShake_kds1_curY\"] = (imageLayer.parent as GameSprite).y;\n                }\n                else {\n                    displayObject.dpX += dx;\n                    displayObject.dpY += dy;\n                    displayObject.dpCoordToRealCoord();\n                    displayObject[\"__imageShake_kds1_curX\"] = displayObject.dpX;\n                    displayObject[\"__imageShake_kds1_curY\"] = displayObject.dpY;\n                }\n                // \n                if (duringFrame != null) {\n                    duringFrame--;\n                    if (duringFrame == 0) {\n                        if (passageData.kds1_imageShakeClear) {\n                            passageData.kds1_imageShakeClear.run();\n                            passageData.kds1_imageShakeClear = null;\n                        }\n                        os.remove_ENTERFRAME(arguments.callee, passageData);\n                    }\n                }\n            }\n            // 如果已没有显示对象的话就直接清理掉该函数\n            else {\n                if (passageData.kds1_imageShakeClear) {\n                    passageData.kds1_imageShakeClear.run();\n                    passageData.kds1_imageShakeClear = null;\n                }\n                os.remove_ENTERFRAME(arguments.callee, passageData);\n            }\n        };\n        // 记录新的震动函数\n        passageData.kds1_imageShakeClear = Callback.New(clearDisplayObjectShake, this, [passageData.displayObject, cmdParams.type]);\n        passageData.kds1_imageShake = f;\n        // 指定的图像对象\n        if (cmdParams.type == 0) {\n            // 覆盖函数\n            var lastOnCoverPassage = passageData.onCoverPassage;\n            passageData.onCoverPassage = function () {\n                if (passageData.kds1_imageShakeClear) {\n                    passageData.kds1_imageShakeClear.run();\n                    passageData.kds1_imageShakeClear = null;\n                }\n                os.remove_ENTERFRAME(f, passageData);\n                lastOnCoverPassage.apply(this, arguments);\n            }\n        }\n        os.add_ENTERFRAME(f, passageData, [passageData, passageData.displayObject, cmdParams]);\n        f.apply(passageData, [passageData, passageData.displayObject, cmdParams]);\n    }\n}\n//------------------------------------------------------------------------------------------------------\n// 属性面板修改：当修改该指令的属性时，只会执行该指令对应的「指令源」的这些函数\n// 如A指令来自自定义指令32号，每次通过属性面板快速修改A指令的参数b时，则会执行32号指令的下面2个函数\n// [current used command] \n//------------------------------------------------------------------------------------------------------\n/**\n * 当属性面板中的属性修改前\n * @param cmd 对应的指令\n * @param cmdParams 对应指令的参数 \n * @param varName 修改的属性名\n */\nfunction onCommandAttributeBeforeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string) {\n\n}\n/**\n * 当属性面板中的属性修改后\n * @param cmd 对应的指令\n * @param cmdParams 对应指令的参数 \n * @param varName 修改的属性名\n * @param newValue 修改后的值\n */\nfunction onCommandAttributeChange(cmd: Command, cmdParams: ThisCommandParams, varName: string, newValue: any) {\n\n}\n//------------------------------------------------------------------------------------------------------\n// 对象操作工具\n// [everyone used command type] 遍历每个执行过的自定义指令类别\n//------------------------------------------------------------------------------------------------------\n/**\n * 当操作工具移动对象时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangePostion(realSelObjs: GameSprite[]): void {\n\n}\n/**\n * 当操作工具缩放时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangeSize(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具旋转时\n * @param realSelObjs 选中的对象\n */\nfunction imageLayerOnToolsChangeRotation(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具开始操作时\n */\nfunction imageLayerOnToolsChangeStart(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具结束操作时\n */\nfunction imageLayerOnToolsChangeEnd(realSelObjs: GameSprite[]) {\n\n}\n/**\n * 当操作工具选中对象时\n */\nfunction imageLayerOnToolsSelectObject(realSelObjs: GameSprite[]) {\n\n}\n//------------------------------------------------------------------------------------------------------\n// 图像层相关 遍历每个已使用的通道，每个已使用的通道再遍历已使用的指令，调用下面的函数\n// [everyone passage] x [everyone used command type]\n//------------------------------------------------------------------------------------------------------\n/**\n * 清理函数：每次刷新前调用此函数进行清理\n * @param passageID 通道\n * @param passageData 通道储存的数据\n */\nfunction imageLayerPassageClear(passageID: number, passageData: any) {\n    // 清理注册的自动旋转\n    if (passageData.kds1_imageShakeClear) {\n        passageData.kds1_imageShakeClear.run();\n        passageData.kds1_imageShakeClear = null;\n    }\n    if (passageData.kds1_imageShake) {\n        os.remove_ENTERFRAME(passageData.kds1_imageShake, passageData);\n        passageData.kds1_imageShake = null;\n    }\n}\n\n/**\n * 开始函数\n * @param passageID 通道\n * @param passageData 通道储存的数据\n */\nfunction imageLayerPassageStart(passageID: number, passageData: any) {\n\n}\n",
    "cmdPreviewJS": "var imageLayerModePassageID = 2005631;\nvar uiLayerModePassageID = 2005632;\nvar stageLayerModePassageID = 2005633;\nfunction runCommand(cmdParams, cmd, isPlayMode) {\n    if (cmdParams.passageIDUseVar) {\n        return;\n    }\n    var passageData;\n    if (cmdParams.type == 0) {\n        passageData = imageLayerPassageData[cmdParams.passageID];\n        if (!passageData || !passageData.displayObject)\n            return;\n    }\n    else if (cmdParams.type == 1) {\n        passageData = imageLayerPassageData[imageLayerModePassageID];\n        if (!passageData) {\n            passageData = imageLayerPassageData[imageLayerModePassageID] = {\n                passageID: imageLayerModePassageID,\n                displayObject: imageLayer\n            };\n        }\n    }\n    else if (cmdParams.type == 2) {\n        passageData = imageLayerPassageData[uiLayerModePassageID];\n        if (!passageData) {\n            passageData = imageLayerPassageData[uiLayerModePassageID] = {\n                passageID: uiLayerModePassageID,\n                displayObject: uiLayer\n            };\n        }\n    }\n    else if (cmdParams.type == 3) {\n        passageData = imageLayerPassageData[stageLayerModePassageID];\n        if (!passageData) {\n            passageData = imageLayerPassageData[stageLayerModePassageID] = {\n                passageID: stageLayerModePassageID,\n                displayObject: imageLayer\n            };\n        }\n    }\n    if (isPlayMode) {\n        if (passageData.kds1_imageShakeClear) {\n            passageData.kds1_imageShakeClear.run();\n            passageData.kds1_imageShakeClear = null;\n        }\n        if (passageData.kds1_imageShake) {\n            os.remove_ENTERFRAME(passageData.kds1_imageShake, passageData);\n            passageData.kds1_imageShake = null;\n        }\n        if (cmdParams.shakeTimeType == 2) {\n            return;\n        }\n        var f;\n        var dx = 0;\n        var dy = 0;\n        var duringFrame = cmdParams.shakeTimeType == 0 ? cmdParams.duringFrame : null;\n        var clearDisplayObjectShake = function (displayObject, type, isOver) {\n            if (isOver === void 0) { isOver = true; }\n            if (type == 1) {\n                if (imageLayer[\"__imageShake_kds1_curX\"] == imageLayer.camera.offsetX && imageLayer[\"__imageShake_kds1_curY\"] == imageLayer.camera.offsetY) {\n                    imageLayer.camera.offsetX -= dx;\n                    imageLayer.camera.offsetY -= dy;\n                }\n            }\n            else if (type == 2) {\n                if (uiLayer[\"__imageShake_kds1_curX\"] == uiLayer.x && uiLayer[\"__imageShake_kds1_curY\"] == uiLayer.y) {\n                    uiLayer.x -= dx;\n                    uiLayer.y -= dy;\n                    if (GameDialog[\"container\"]) {\n                        GameDialog[\"container\"].x -= dx;\n                        GameDialog[\"container\"].y -= dy;\n                    }\n                }\n            }\n            else if (type == 3) {\n                if (imageLayer.parent[\"__imageShake_kds1_curX\"] == imageLayer.parent.x && imageLayer.parent[\"__imageShake_kds1_curY\"] == imageLayer.parent.y) {\n                    imageLayer.parent.x -= dx;\n                    imageLayer.parent.y -= dy;\n                }\n            }\n            else if (displayObject) {\n                if (displayObject[\"__imageShake_kds1_curX\"] == displayObject.dpX && displayObject[\"__imageShake_kds1_curY\"] == displayObject.dpY) {\n                    displayObject.dpX -= dx;\n                    displayObject.dpY -= dy;\n                }\n            }\n            if (isOver) {\n                trace(\"结束并还原\");\n            }\n            else {\n                trace(\"还原\");\n            }\n            dx = dy = 0;\n        };\n        f = function (passageData, displayObject, cmdParams) {\n            var newDx = Math.floor(cmdParams.dx * 2 * Math.random() - cmdParams.dx);\n            var newDy = Math.floor(cmdParams.dy * 2 * Math.random() - cmdParams.dy);\n            if (displayObject) {\n                clearDisplayObjectShake(displayObject, cmdParams.type, false);\n                dx = newDx;\n                dy = newDy;\n                if (cmdParams.type == 1) {\n                    imageLayer.camera.offsetX += dx;\n                    imageLayer.camera.offsetY += dy;\n                    imageLayer.updateFrame(true);\n                    imageLayer[\"__imageShake_kds1_curX\"] = imageLayer.camera.offsetX;\n                    imageLayer[\"__imageShake_kds1_curY\"] = imageLayer.camera.offsetY;\n                }\n                else if (cmdParams.type == 2) {\n                    uiLayer.x += dx;\n                    uiLayer.y += dy;\n                    if (GameDialog[\"container\"]) {\n                        GameDialog[\"container\"].x += dx;\n                        GameDialog[\"container\"].y += dy;\n                    }\n                    uiLayer[\"__imageShake_kds1_curX\"] = uiLayer.x;\n                    uiLayer[\"__imageShake_kds1_curY\"] = uiLayer.y;\n                }\n                else if (cmdParams.type == 3) {\n                    imageLayer.parent.x += dx;\n                    imageLayer.parent.y += dy;\n                    imageLayer.parent[\"__imageShake_kds1_curX\"] = imageLayer.parent.x;\n                    imageLayer.parent[\"__imageShake_kds1_curY\"] = imageLayer.parent.y;\n                }\n                else {\n                    displayObject.dpX += dx;\n                    displayObject.dpY += dy;\n                    displayObject.dpCoordToRealCoord();\n                    displayObject[\"__imageShake_kds1_curX\"] = displayObject.dpX;\n                    displayObject[\"__imageShake_kds1_curY\"] = displayObject.dpY;\n                }\n                if (duringFrame != null) {\n                    duringFrame--;\n                    if (duringFrame == 0) {\n                        if (passageData.kds1_imageShakeClear) {\n                            passageData.kds1_imageShakeClear.run();\n                            passageData.kds1_imageShakeClear = null;\n                        }\n                        os.remove_ENTERFRAME(arguments.callee, passageData);\n                    }\n                }\n            }\n            else {\n                if (passageData.kds1_imageShakeClear) {\n                    passageData.kds1_imageShakeClear.run();\n                    passageData.kds1_imageShakeClear = null;\n                }\n                os.remove_ENTERFRAME(arguments.callee, passageData);\n            }\n        };\n        passageData.kds1_imageShakeClear = Callback.New(clearDisplayObjectShake, this, [passageData.displayObject, cmdParams.type]);\n        passageData.kds1_imageShake = f;\n        if (cmdParams.type == 0) {\n            var lastOnCoverPassage = passageData.onCoverPassage;\n            passageData.onCoverPassage = function () {\n                if (passageData.kds1_imageShakeClear) {\n                    passageData.kds1_imageShakeClear.run();\n                    passageData.kds1_imageShakeClear = null;\n                }\n                os.remove_ENTERFRAME(f, passageData);\n                lastOnCoverPassage.apply(this, arguments);\n            };\n        }\n        os.add_ENTERFRAME(f, passageData, [passageData, passageData.displayObject, cmdParams]);\n        f.apply(passageData, [passageData, passageData.displayObject, cmdParams]);\n    }\n}\nfunction onCommandAttributeBeforeChange(cmd, cmdParams, varName) {\n}\nfunction onCommandAttributeChange(cmd, cmdParams, varName, newValue) {\n}\nfunction imageLayerOnToolsChangePostion(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeSize(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeRotation(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeStart(realSelObjs) {\n}\nfunction imageLayerOnToolsChangeEnd(realSelObjs) {\n}\nfunction imageLayerOnToolsSelectObject(realSelObjs) {\n}\nfunction imageLayerPassageClear(passageID, passageData) {\n    if (passageData.kds1_imageShakeClear) {\n        passageData.kds1_imageShakeClear.run();\n        passageData.kds1_imageShakeClear = null;\n    }\n    if (passageData.kds1_imageShake) {\n        os.remove_ENTERFRAME(passageData.kds1_imageShake, passageData);\n        passageData.kds1_imageShake = null;\n    }\n}\nfunction imageLayerPassageStart(passageID, passageData) {\n}\n",
    "name": "图像震动",
    "customPhraseDescTS": "// 根据属性名称值编写自定义短语描述，如：\"我的短语是\"+attrs.xxx\n// 使用下拉框组件的变量attrs.xxx有对应的attrs.xxxItems的属性以便获得标签名集合\n// 获取自定义模块的数据名称的函数：getModuleDataName(moduleID:number,dataID:number):string;\n// 获取各种列表内数据名称的函数：getTypeDataListName(typeID: number, dataID: number):string;\n// -- typeID ：0-全局变量 1-全局开关 2-全局字符串 3-玩家变量 4-玩家开关 5-玩家字符串\n//           ：6-场景列表 7-场景对象模型列表 8-图块列表 9-行走图列表 10-行走图动作列表 11-立绘列表 12-立绘表情列表\n//           ：13-公共事件 14-对话框列表 15-动画列表 16-动画信号列表 17-界面列表 18-数据结构列表 19-自定义模块列表\n//           ：20-自定义命令列表 21-自定义行为列表 22-自动元件列表 23-行走图部件列表 24-立绘部件列表 25-材质列表\nvar str = \"\";\nstr += \"「\" + attrs.typeItems[attrs.type] + \"」\";\nif (attrs.type == 0) {\n    var passageStr = attrs.passageIDUseVar ? `@${attrs.passageIDVar}-${getTypeDataListName(3, attrs.passageIDVar)}` : attrs.passageID;\n    str += `编号【${passageStr}】`;\n}\nstr += attrs.shakeTimeTypeItems[attrs.shakeTimeType];\nif (attrs.shakeTimeType == 0) {\n    str += \":\" + attrs.duringFrame + \"帧\";\n}\n// 震动幅度\nif (attrs.shakeTimeType != 2) {\n    str += ` 震动强度（${attrs.dx},${attrs.dy}）`;\n}\nstr;",
    "customPhraseDescJS": "var str = \"\";\nstr += \"「\" + attrs.typeItems[attrs.type] + \"」\";\nif (attrs.type == 0) {\n    var passageStr = attrs.passageIDUseVar ? \"@\" + attrs.passageIDVar + \"-\" + getTypeDataListName(3, attrs.passageIDVar) : attrs.passageID;\n    str += \"\\u7F16\\u53F7\\u3010\" + passageStr + \"\\u3011\";\n}\nstr += attrs.shakeTimeTypeItems[attrs.shakeTimeType];\nif (attrs.shakeTimeType == 0) {\n    str += \":\" + attrs.duringFrame + \"帧\";\n}\nif (attrs.shakeTimeType != 2) {\n    str += \" \\u9707\\u52A8\\u5F3A\\u5EA6\\uFF08\" + attrs.dx + \",\" + attrs.dy + \"\\uFF09\";\n}\nstr;\n"
}